name: Axilivo Workflow

on:
  repository_dispatch:
    types: [trigger-org-ci]

jobs:
  pint:
    name: Laravel PINT
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.pint.outputs.exit_code }}
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.branch_repo }}
          ref: refs/pull/${{ github.event.client_payload.pull_request }}/merge
          token: ${{ secrets.PAT_FOR_ORG_REPOS }}
          path: project

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ github.event.client_payload.php_version }}
          extensions: mbstring, bcmath, intl

      - name: Install Composer dependencies
        continue-on-error: true
        run: composer install --no-progress --prefer-dist --optimize-autoloader
        working-directory: project

      - name: Run PINT
        id: pint
        continue-on-error: true
        run: |
          vendor/bin/pint --test 2>&1 | tee test.log
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        working-directory: project

      - name: Upload Pint log
        uses: actions/upload-artifact@v4
        with:
          name: pint-log
          path: project/test.log

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.prettier.outputs.exit_code }}
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.branch_repo }}
          ref: refs/pull/${{ github.event.client_payload.pull_request }}/merge
          token: ${{ secrets.PAT_FOR_ORG_REPOS }}
          path: project

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install JS dependencies
        run: npm install
        working-directory: project

      - name: Run Prettier
        id: prettier
        continue-on-error: true
        run: |
          npx prettier --write resources/ 2>&1 | tee test.log
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        working-directory: project

      - name: Upload Prettier log
        uses: actions/upload-artifact@v4
        with:
          name: prettier-log
          path: project/test.log

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.eslint.outputs.exit_code }}
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.branch_repo }}
          ref: refs/pull/${{ github.event.client_payload.pull_request }}/merge
          token: ${{ secrets.PAT_FOR_ORG_REPOS }}
          path: project

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install JS dependencies
        run: npm install
        working-directory: project

      - name: Run ESLint
        id: eslint
        continue-on-error: true
        run: |
          npx eslint resources/ --max-warnings=0 2>&1 | tee test.log
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        working-directory: project

      - name: Upload ESLint log
        uses: actions/upload-artifact@v4
        with:
          name: eslint-log
          path: project/test.log

  merge-logs:
    name: Merge Logs
    runs-on: ubuntu-latest
    needs: [pint, prettier, eslint]
    outputs:
      log: ${{ steps.logs.outputs.cleaned_log }}
      pint: ${{ needs.pint.outputs.exit_code }}
      prettier: ${{ needs.prettier.outputs.exit_code }}
      eslint: ${{ needs.eslint.outputs.exit_code }}
      result: ${{ steps.set-result.outputs.job_result }}
    steps:
      - name: Download Pint log
        uses: actions/download-artifact@v4
        with:
          name: pint-log
          path: logs/pint

      - name: Download Prettier log
        uses: actions/download-artifact@v4
        with:
          name: prettier-log
          path: logs/prettier

      - name: Download ESLint log
        uses: actions/download-artifact@v4
        with:
          name: eslint-log
          path: logs/eslint

      - name: Merge logs
        run: |
          mkdir -p merged
          cat logs/pint/test.log >> merged/test.log || true
          echo "" >> merged/test.log
          cat logs/prettier/test.log >> merged/test.log || true
          echo "" >> merged/test.log
          cat logs/eslint/test.log >> merged/test.log || true

      - name: Save last 30 lines
        id: logs
        run: |
          if [ -s merged/test.log ]; then
            echo "cleaned_log<<EOF" >> "$GITHUB_OUTPUT"
            tail -n 30 merged/test.log >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "cleaned_log=No logs found" >> "$GITHUB_OUTPUT"
          fi

      - name: Set final result
        id: set-result
        run: |
          if [ "${{ needs.pint.outputs.exit_code }}" != "0" ] || \
             [ "${{ needs.prettier.outputs.exit_code }}" != "0" ] || \
             [ "${{ needs.eslint.outputs.exit_code }}" != "0" ]; then
            echo "job_result=failure" >> $GITHUB_OUTPUT
          else
            echo "job_result=success" >> $GITHUB_OUTPUT
          fi

  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [merge-logs]
    if: always()
    steps:
      - name: Send notification to Discord
        run: |
          status() {
            if [ "$1" = "0" ]; then
              echo "success"
            else
              echo "failure"
            fi
          }

          PAYLOAD=$(jq -n \
          --arg repo "${{ github.event.client_payload.branch_repo }}" \
          --arg run_id "${{ github.run_id }}" \
          --arg pr "${{ github.event.client_payload.pull_request }}" \
          --arg pint "$(status ${{ needs.merge-logs.outputs.pint }})" \
          --arg prettier "$(status ${{ needs.merge-logs.outputs.prettier }})" \
          --arg eslint "$(status ${{ needs.merge-logs.outputs.eslint }})" \
          --arg final "${{ needs.merge-logs.outputs.result }}" \
          --arg backend_log "${{ needs.merge-logs.outputs.log }}" \
          '{
            "repo": $repo,
            "run_id": $run_id,
            "pr": $pr,
            "PINT": $pint,
            "Prettier": $prettier,
            "ESLint": $eslint,
            "Final_Result": $final,
            "backend_log": $backend_log
          }')
    
          curl -X POST "${{ secrets.BOT_URL }}" \
            -H "Authorization: Bearer ${{ secrets.BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
